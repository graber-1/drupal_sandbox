# Default Drupal 10 Tugboat starter config.
# https://docs.tugboatqa.com/starter-configs/tutorials/drupal-10/
services:
  # Define the database service.
  database:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:lts
    commands:
      init:
        # Configure database for UTF-8.
        - echo "[mysqld]\ninnodb_large_prefix=true\ninnodb_file_format=barracuda\ninnodb_file_per_table=true" >> /etc/mysql/conf.d/utf8mb.conf
      build:
        # Drop and re-create the database (needed when rebuilding/reinstalling).
        - mariadb-admin -f drop tugboat && mariadb-admin create tugboat

  # Define the webserver service.
  webserver:
    # This uses PHP 8.1.x with Apache: update to match your version of PHP.
    image: tugboatqa/php:8.3-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building.
    depends: database

    # A set of commands to run while building this service
    commands:
      # The INIT command configures the webserver.
      init:
        # Install opcache and mod-rewrite.
        - docker-php-ext-install opcache
        - a2enmod headers rewrite
        # Install ZipArchive
        - apt-get update
        - apt-get install -y libzip-dev zip && docker-php-ext-install zip

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Increase maximum upload file size.
        - echo "upload_max_filesize = 40M" >> /usr/local/etc/php/conf.d/tugboat.ini
        - echo "post_max_size = 40M" >> /usr/local/etc/php/conf.d/tugboat.ini

        # Create any required directories that don't exist.
        # - mkdir -p "${TUGBOAT_ROOT}/files-private"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Set the tugboat-specific Drupal settings.
        - cp -f "${TUGBOAT_ROOT}/.tugboat/settings.remote.php" "${DOCROOT}/sites/default/settings.remote.php"

        # Map your custom modules and themes into the Drupal structure.
        #- ln -snf "${TUGBOAT_ROOT}/custom/themes" "${DOCROOT}/themes/custom"
        #- ln -snf "${TUGBOAT_ROOT}/custom/modules" "${DOCROOT}/modules/custom"

        # Make sure our files and translations folders exists and are writable.
        - mkdir -p "${DOCROOT}/sites/default/files/translations"
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - mkdir -p "${TUGBOAT_ROOT}/files-private"
        - chgrp -R www-data "${TUGBOAT_ROOT}/files-private"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        # Install/update packages managed by composer.
        - composer install --optimize-autoloader
        - composer update

      start:
        # Reinstall the site with default test content.
        - rm -rf web/sites/default/files/*
        - vendor/bin/drush site:install -v minimal --existing-config --yes --sites-subdir=default
        - vendor/bin/drush lms-ctt --simple-passwords
        - vendor/bin/drush uli
